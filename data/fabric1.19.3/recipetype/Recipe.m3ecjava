package ${mod.package}.recipetype;

import net.minecraft.inventory.SimpleInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.recipe.Ingredient;
import net.minecraft.recipe.Recipe;
import net.minecraft.recipe.RecipeSerializer;
import net.minecraft.recipe.RecipeType;
import net.minecraft.util.Identifier;
import net.minecraft.world.World;

public class ${mod.recipetype.${%v}.class}Recipe implements Recipe<SimpleInventory> {
	//You can add as much inputs as you want here.
	//It is important to always use Ingredient, so you can support tags.
	private final Ingredient inputA;
	private final Ingredient inputB;
	private final ItemStack result;
	private final Identifier id;

	public ${mod.recipetype.${%v}.class}Recipe(Ingredient inputA, Ingredient inputB, ItemStack result, Identifier id) {
		this.inputA = inputA;
		this.inputB = inputB;
		this.result = result;
		this.id = id;
	}

	public Ingredient getInputA() {
		return this.inputA;
	}
 
	public Ingredient getInputB() {
		return this.inputB;
	}
 
	@Override
	public ItemStack getOutput() {
		return this.result;
	}
 
	@Override
	public Identifier getId() {
		return this.id;
	}

    @Override
    public RecipeSerializer<?> getSerializer() {
        return ${mod.recipetype.${%v}.class}Serializer.INSTANCE;
    }

	@Override
	public boolean matches(SimpleInventory inventory, World world) {
		if (inventory.size() < 2) return false;
		return inputA.test(inventory.getStack(0)) && inputB.test(inventory.getStack(1));
	}

	@Override
	public ItemStack craft(SimpleInventory inventory) {
		return this.getOutput().copy();
	}

	@Override
	public boolean fits(int width, int height) {
		return true;
	}


	public static class Type implements RecipeType<${mod.recipetype.${%v}.class}Recipe> {
        // Define ${mod.recipetype.${%v}.class}.Type as a singleton by making its constructor private and exposing an instance.
        private Type() {}
        public static final Type INSTANCE = new Type();
        public static final String ID = "${%v}";
    }
    @Override
    public RecipeType<?> getType() {
        return Type.INSTANCE;
    }

}

