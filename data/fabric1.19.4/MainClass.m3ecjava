package ${mod.package};

import ${mod.package}.registry.ModBlocks;
import ${mod.package}.registry.ModItems;
---iter mod.registry.recipetype.names
import ${mod.package}.recipetype.${mod.recipetype.$%v.class}Serializer;
import ${mod.package}.recipetype.${mod.recipetype.$%v.class}Recipe;---end

---iter mainclass.imports
import $%v;---end
import net.fabricmc.fabric.api.itemgroup.v1.FabricItemGroup;
import net.fabricmc.fabric.api.itemgroup.v1.ItemGroupEvents;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.registry.RegistryKey;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.registry.entry.RegistryEntry;
import net.minecraft.registry.tag.BlockTags;
import net.minecraft.structure.rule.RuleTest;
import net.minecraft.structure.rule.RuleTestType;
import net.minecraft.structure.rule.TagMatchRuleTest;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.random.Random;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.feature.*;
import net.minecraft.world.gen.YOffset;
import net.minecraft.world.gen.placementmodifier.CountPlacementModifier;
import net.minecraft.world.gen.placementmodifier.HeightRangePlacementModifier;
import net.minecraft.world.gen.placementmodifier.SquarePlacementModifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Arrays;


public class ${mod.class} implements ModInitializer {
	public static final Logger LOGGER = LoggerFactory.getLogger("${mod.mcpath}");
	public static final String MOD_ID = "${mod.mcpath}";

---if mod.iconItem
	public static final ItemGroup ITEM_GROUP = FabricItemGroup.builder(new Identifier(MOD_ID, "general"))
			.icon(() -> new ItemStack(ModItems.${mod.iconItem^UPPER}))
			.build();---fi

---iter mod.registry.enchantment.names
	private static Enchantment ${mod.enchantment.$%v.name^UPPER} = Registry.register(
            Registry.ENCHANTMENT,
            new Identifier("tutorial", "${mod.enchantment.$%v.name^UPPER}"),
            new ${mod.enchantment.$%v.name^CAPITAL}Enchantment()
    );
---end


---iter mod.registry.ore.names
	public static final RegistryKey<PlacedFeature> ${mod.ore.$%v^upper}_PLACED_KEY =
		RegistryKey.of(RegistryKeys.PLACED_FEATURE, new Identifier(${mod.class}.MOD_ID, "$%v"));---end

	@Override
	public void onInitialize() {
---iter mainclass.onInitialize.first
		$%v---end
		ModItems.RegisterItems();
		ModBlocks.RegisterBlocks();
---iter mod.registry.recipetype.names
		Registry.register(Registry.RECIPE_SERIALIZER, ${mod.recipetype.$%v.class}Serializer.ID, ${mod.recipetype.$%v.class}Serializer.INSTANCE);
		Registry.register(Registry.RECIPE_TYPE, new Identifier(${mod.class}.MOD_ID, "$%v"), ${mod.recipetype.$%v.class}Recipe.Type.INSTANCE);---end
		ItemGroupEvents.modifyEntriesEvent(ITEM_GROUP).register(content -> {
---iter mod.registry.item.names
			content.add(ModItems.${mod.item.$%v^upper});---end
---iter mod.registry.food.names
			content.add(ModItems.${mod.food.$%v^upper});---end
---iter mod.registry.blockitem.names
			content.add(ModItems.${mod.blockitem.$%v.uppercased});---end
---iter mod.registry.armor.names
			content.add(ModItems.${mod.armor.$%v.uppercased});---end
---iter mod.registry.tool.names
			content.add(ModItems.${mod.tool.$%v.uppercased});---end
---iter mod.registry.sapling.names
			content.add(ModItems.${mod.sapling.$%v.uppercased});---end
		});

---iter mod.registry.ore.names
---if mod.ore.$%v.overworldore
		BiomeModifications.addFeature(BiomeSelectors.foundInOverworld(), GenerationStep.Feature.UNDERGROUND_ORES, ${mod.ore.$%v^upper}_PLACED_KEY);---fi---if mod.ore.$%v.netherore
		BiomeModifications.addFeature(BiomeSelectors.foundInTheNether(), GenerationStep.Feature.UNDERGROUND_ORES, ${mod.ore.$%v^upper}_PLACED_KEY);---fi---if mod.ore.$%v.endore
		BiomeModifications.addFeature(BiomeSelectors.foundInTheEnd(), GenerationStep.Feature.UNDERGROUND_ORES, ${mod.ore.$%v^upper}_PLACED_KEY);---fi---end

---iter mainclass.onInitialize
		$%v---end
	}
}
