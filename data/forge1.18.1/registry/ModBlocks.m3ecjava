package ${mod.package}.registry;

import ${mod.package}.${mod.class};
import ${mod.package}.registry.ModItems;

import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

public class ModItems {
	public static final DeferredRegister<Blocks> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, ${mod.class}.MOD_ID);

---iter mod.registry.block.names
	public static final RegistryObject<Block> ${mod.block.$%v^upper} = registerBlock("$%v", () -> new ${mod.block.$%v.BlockClass}(
		BlockBehaviour.Properties.of(Material.${mod.block.$%v.material})
		.strength(${mod.block.$%v.hardness}, ${mod.block.$%v.resistance})---if mod.block.$%v.requiresTool
		.requiresCorrectToolForDrops()---fi
	), ${mod.class}.TAB);
---end


	private static <T extends Block> RegistryObject<Block> registerBlock(String name, Supplier<T> block, CreativeModTab tab) {
		RegistryObject<T> toReturn = BLOCKS.register(name, block);
		registerBlockItem(name, toReturn, tab);
		return toReturn;
	}

	private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block, CreativeModTab tab) {
		return ModItems.ITEMS.register(name, () -> new BlockItem(block.get(), new ItemProperties().tab(tab)));
	}

	public static void register(IEventBus eventBus) {
		BLOCKS.register(eventBus);
	}
}
