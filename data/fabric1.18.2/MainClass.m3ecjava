package ${mod.package};

import ${mod.package}.registry.ModBlocks;
import ${mod.package}.registry.ModItems;
---iter mod.registry.recipetype.names
import ${mod.package}.recipetype.${mod.recipetype.$%v.class}Recipe;---end

import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
import net.fabricmc.fabric.api.client.itemgroup.FabricItemGroupBuilder;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.util.Identifier;
import net.minecraft.util.registry.BuiltinRegistries;
import net.minecraft.util.registry.Registry;
import net.minecraft.util.registry.RegistryEntry;
import net.minecraft.util.registry.RegistryKey;
import net.minecraft.world.gen.GenerationStep;
import net.minecraft.world.gen.feature.*;
import net.minecraft.world.gen.YOffset;
import net.minecraft.world.gen.placementmodifier.CountPlacementModifier;
import net.minecraft.world.gen.placementmodifier.HeightRangePlacementModifier;
import net.minecraft.world.gen.placementmodifier.SquarePlacementModifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;


public class ${mod.class} implements ModInitializer {
	public static final Logger LOGGER = LoggerFactory.getLogger("${mod.mcpath}");
	public static final String MOD_ID = "${mod.mcpath}";

---iter mod.registry.ore.names
---if mod.ore.$%v.OverworldOre
	private static ConfiguredFeature<?, ?> OVERWORLD_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE = new ConfiguredFeature
		(Feature.ORE, new OreFeatureConfig(OreConfiguredFeatures.STONE_ORE_REPLACEABLES, ${mod.ore.$%v.vein.block}.getDefaultState(), ${mod.ore.$%v.vein.size}));

	public static PlacedFeature OVERWORLD_${mod.ore.$%v.uppercased}_PLACED_FEATURE = new PlacedFeature
		(RegistryEntry.of(OVERWORLD_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE),
---fi---if mod.ore.$%v.NetherOre
	private static ConfiguredFeature<?, ?> NETHER_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE = new ConfiguredFeature
		(Feature.ORE, new OreFeatureConfig(OreConfiguredFeatures.STONE_ORE_REPLACEABLES, ${mod.ore.$%v.vein.block}.getDefaultState(), ${mod.ore.$%v.vein.size}));

	public static PlacedFeature NETHER_${mod.ore.$%v.uppercased}_PLACED_FEATURE = new PlacedFeature
		(RegistryEntry.of(NETHER_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE),
---fi---if mod.ore.$%v.EndOre
	private static ConfiguredFeature<?, ?> END_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE = new ConfiguredFeature
		(Feature.ORE, new OreFeatureConfig(new BlockMatchRuleTest(Blocks.END_STONE), ${mod.ore.$%v.vein.block}.getDefaultState(), ${mod.ore.$%v.vein.size}));

	public static PlacedFeature END_${mod.ore.$%v.uppercased}_PLACED_FEATURE = new PlacedFeature
		(RegistryEntry.of(END_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE),
---fi			Arrays.asList(
				CountPlacementModifier.of(10),
				SquarePlacementModifier.of(),
				HeightRangePlacementModifier.uniform(---if mod.ore.$%v.vein.atbedrock
	YOffset.getBottom()---fi---if mod.ore.$%v.miny
	YOffset.fixed(${mod.ore.$%v.miny})---fi, YOffset.fixed(${mod.ore.$%v.maxy}))));
---end

	public static final ItemGroup ITEM_GROUP = FabricItemGroupBuilder.build(
			new Identifier(MOD_ID, "general"),
			() -> new ItemStack(ModItems.${mod.iconItem^UPPER}));

---iter mod.registry.enchantment.names
	private static Enchantment ${mod.enchantment.$%v.name^UPPER} = Registry.register(
            Registry.ENCHANTMENT,
            new Identifier("tutorial", "${mod.enchantment.$%v.name^UPPER}"),
            new ${mod.enchantment.$%v.name^CAPITAL}Enchantment()
    );
---end

	@Override
	public void onInitialize() {
		ModItems.RegisterItems();
		ModBlocks.RegisterBlocks();
---iter mod.registry.ore.names
	---if mod.ore.$%v.OverworldOre
		Registry.register(BuiltinRegistries.CONFIGURED_FEATURE,
			new Identifier("${mod.mcpath}", "overworld_$%v"), OVERWORLD_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE);
		Registry.register(BuiltinRegistries.PLACED_FEATURE,
			new Identifier("${mod.mcpath}", "overworld_$%v"), OVERWORLD_${mod.ore.$%v.uppercased}_PLACED_FEATURE);
		BiomeModifications.addFeature(BiomeSelectors.foundInOverworld(), GenerationStep.Feature.UNDERGROUND_ORES,
			RegistryKey.of(Registry.PLACED_FEATURE_KEY, new Identifier("${mod.mcpath}", "overworld_$%v")));
	---fi---if mod.ore.$%v.NetherOre
		Registry.register(BuiltinRegistries.CONFIGURED_FEATURE,
			new Identifier("${mod.mcpath}", "nether_$%v"), NETHER_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE);
		Registry.register(BuiltinRegistries.PLACED_FEATURE,
			new Identifier("${mod.mcpath}", "nether_$%v"), NETHER_${mod.ore.$%v.uppercased}_PLACED_FEATURE);
		BiomeModifications.addFeature(BiomeSelectors.foundInOverworld(), GenerationStep.Feature.UNDERGROUND_ORES,
			RegistryKey.of(Registry.PLACED_FEATURE_KEY, new Identifier("${mod.mcpath}", "nether_$%v")));
	---fi---if mod.ore.$%v.EndOre
		Registry.register(BuiltinRegistries.CONFIGURED_FEATURE,
			new Identifier("${mod.mcpath}", "end_$%v"), END_${mod.ore.$%v.uppercased}_CONFIGURED_FEATURE);
		Registry.register(BuiltinRegistries.PLACED_FEATURE,
			new Identifier("${mod.mcpath}", "end_$%v"), END_${mod.ore.$%v.uppercased}_PLACED_FEATURE);
		BiomeModifications.addFeature(BiomeSelectors.foundInOverworld(), GenerationStep.Feature.UNDERGROUND_ORES,
			RegistryKey.of(Registry.PLACED_FEATURE_KEY, new Identifier("${mod.mcpath}", "end_$%v")));
	---fi
---end
---iter mod.registry.recipetype.names
		Registry.register(Registry.RECIPE_TYPE, new Identifier(${mod.class}.MOD_ID, "$%v"), ${mod.recipetype.$%v.class}Recipe.Type.INSTANCE);
---end


	}
}
